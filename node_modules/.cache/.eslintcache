[{"/Users/michelledeng/Documents/react-spotify-player/src/index.js":"1","/Users/michelledeng/Documents/react-spotify-player/src/reportWebVitals.js":"2","/Users/michelledeng/Documents/react-spotify-player/src/App.js":"3","/Users/michelledeng/Documents/react-spotify-player/src/const.js":"4","/Users/michelledeng/Documents/react-spotify-player/src/hash.js":"5","/Users/michelledeng/Documents/react-spotify-player/src/Player.js":"6","/Users/michelledeng/Documents/react-spotify-player/src/colors.js":"7","/Users/michelledeng/Documents/react-spotify-player/src/Genres.js":"8","/Users/michelledeng/Documents/react-spotify-player/src/Toggle.js":"9","/Users/michelledeng/Documents/react-spotify-player/src/Color.js":"10","/Users/michelledeng/Documents/react-spotify-player/src/Top.js":"11"},{"size":535,"mtime":1655105357726,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1653599390314,"results":"14","hashOfConfig":"13"},{"size":11785,"mtime":1659815424438,"results":"15","hashOfConfig":"13"},{"size":1004,"mtime":1659678965795,"results":"16","hashOfConfig":"13"},{"size":319,"mtime":1653601511128,"results":"17","hashOfConfig":"13"},{"size":2335,"mtime":1659742771813,"results":"18","hashOfConfig":"13"},{"size":270,"mtime":1655102399634,"results":"19","hashOfConfig":"13"},{"size":1471,"mtime":1659664592435,"results":"20","hashOfConfig":"13"},{"size":1513,"mtime":1655106795399,"results":"21","hashOfConfig":"13"},{"size":1118,"mtime":1655100802841,"results":"22","hashOfConfig":"13"},{"size":3254,"mtime":1659815521596,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1pg8doj",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/michelledeng/Documents/react-spotify-player/src/index.js",[],[],[],"/Users/michelledeng/Documents/react-spotify-player/src/reportWebVitals.js",[],[],"/Users/michelledeng/Documents/react-spotify-player/src/App.js",["62"],[],"import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\n\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./const\";\nimport { track_uri, artist_uri, short_uri, medium_uri, long_uri } from \"./const\"\nimport { pause_uri, play_uri, next_uri, prev_uri } from \"./const\";\nimport { sage, retro, bubblegum } from \"./colors\"\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport Top from \"./Top\";\nimport ToggleButtons from \"./Toggle\";\nimport Genres from \"./Genres\"\nimport Color from \"./Color\";\nimport Button from 'react-bootstrap/Button';\nimport radio from './images/Radio.png';\nimport \"./App.css\";\nimport axios from 'axios';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // player\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0,\n      },\n      is_playing: false,\n      progress_ms: 0,\n      no_data: false,\n\n      // short \n\n      top_track_items_short_term: [{\n        item: {\n          album: {\n            images: [{ url: \"\" }]\n          },\n          name: \"\",\n          artists: [{ name: \"\" }],\n        }\n      }],\n\n      retrieved_tracks: false,\n      \n      top_artist_items_short_term: [{\n        genres: [],\n        images: [{ url: \"\" }],\n        name: \"\"\n      }],\n      \n      retrieved_artists: false,\n\n      // medium\n      \n      top_track_items_medium_term: [{\n        item: {\n          album: {\n            images: [{ url: \"\" }]\n          },\n          name: \"\",\n          artists: [{ name: \"\" }],\n        }\n      }],\n      top_artist_items_medium_term: [{\n        genres: [],\n        images: [{ url: \"\" }],\n        name: \"\"\n      }],\n      \n      // medium\n\n      top_track_items_long_term: [{\n        item: {\n          album: {\n            images: [{ url: \"\" }]\n          },\n          name: \"\",\n          artists: [{ name: \"\" }],\n        }\n      }],\n      top_artist_items_long_term: [{\n        genres: [],\n        images: [{ url: \"\" }],\n        name: \"\"\n      }],\n\n      // other\n      time_range: short_uri,\n\n      current_color: sage,\n      retrieved_device: false,\n      device_info: '',\n\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.getDeviceInfo = this.getDeviceInfo.bind(this);\n    this.getTopTracks = this.getTopTracks.bind(this);\n    this.getTopArtists = this.getTopArtists.bind(this);\n    this.pausePlayer = this.pausePlayer.bind(this);\n    this.playPlayer = this.playPlayer.bind(this);\n    this.nextSong = this.nextSong.bind(this);\n    this.prevSong = this.prevSong.bind(this);\n    this.tick = this.tick.bind(this);\n    \n    this.handleClick1 = this.handleClick1.bind(this);\n    this.handleClick2 = this.handleClick2.bind(this);\n    this.handleClick3 = this.handleClick3.bind(this);\n    this.handlePause = this.handlePause.bind(this);\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.handlePrev = this.handlePrev.bind(this);\n\n    this.setSage = this.setSage.bind(this);\n    this.setRetro = this.setRetro.bind(this);\n    this.setBubblegum = this.setBubblegum.bind(this);\n    // this.brown = this.brown.bind(this);\n  }\n\n  handleClick1() {\n    this.setState({\n      time_range: short_uri\n    });\n  }\n\n  handleClick2() {\n    this.setState({\n      time_range: medium_uri\n    });\n  }\n\n  handleClick3() {\n    this.setState({\n      time_range: long_uri\n    });\n  }\n\n  handlePause() {\n    this.pausePlayer(this.state.token);\n    // this.setState({\n    //   is_playing: false,\n    // });\n    // console.log('handle pause');\n  }\n\n  handlePlay() {\n    // this.setState({\n    //   is_playing: true,\n    // });\n    // console.log('handle play');\n    this.playPlayer(this.state.token);\n  }\n\n  handleNext() {\n    this.setState({\n      is_playing: true,\n    });\n    this.nextSong(this.state.token);\n  }\n\n  handlePrev() {\n    this.setState({\n      is_playing: true,\n    });\n    this.prevSong(this.state.token);\n  }\n\n  setSage() {\n    this.setState({\n      current_color: sage\n    });\n  }\n\n  setRetro() {\n    this.setState({\n      current_color: retro\n    });\n  }\n\n  setBubblegum() {\n    this.setState({\n      current_color: bubblegum\n    });\n  }\n\n  // runs after first render() lifecycle\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n    var uris = [short_uri, medium_uri, long_uri]\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token,\n      });\n\n      this.getCurrentlyPlaying(_token);\n      for (var i = 0; i < uris.length; i++) {\n        this.getTopTracks(_token, uris[i])\n        this.getTopArtists(_token, uris[i])\n      }\n      this.getDeviceInfo(_token)\n    }\n\n    // set interval for polling every 2 seconds\n    this.interval = setInterval(() => this.tick(), 100);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    // make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n        \n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false\n        });\n        // console.log('currently playing');\n      }\n    });\n  }\n\n  getTopTracks(token, length) {\n    // make a call using the token\n    var item_name = `top_track_items_${length}`;\n    $.ajax({\n      url: track_uri + length,\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.setState({\n          retrieved_tracks: true,\n          [item_name]: data.items,\n        })\n      }\n    });\n  }\n\n  getTopArtists = async(token, length) => {\n    var item_name = `top_artist_items_${length}`;\n    try{\n      const response = await axios.get(artist_uri + length, {\n        headers: {\n          Authorization: 'Bearer ' + token,\n        }\n      });\n\n      this.setState({\n        retrieved_artists: true,\n        [item_name]: response.data.items,\n      })\n    } catch(error){\n      console.log(error);\n    }\n  };\n\n  getDeviceInfo(token) {\n    // make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player/devices\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        for (var i = 0; i < data.devices.length; i++) {\n          if (data.devices[i][\"is_active\"] === true) {\n            this.setState({\n              device_info: data.devices[i].id,\n              retrieved_device: true\n            })\n          }\n        }\n      }\n    });\n  }\n\n  pausePlayer(token) {\n    $.ajax({\n      url: pause_uri + this.state.device_info,\n      type: \"PUT\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.setState({\n          is_playing: false,\n        })\n        // console.log('pause')\n      }\n    });\n  }\n\n  playPlayer(token) {\n    $.ajax({\n      url:  'https://api.spotify.com/v1/me/player/play',\n      headers: { 'Authorization': 'Bearer ' + token },\n      method: 'PUT',\n      dataType: 'json',\n      body: {\n          // \"context_uri\": \"spotify:album:5ht7ItJgpBH7W6vJ5BqpPr\",\n          \"offset\": {\"position\": 5}\n        },\n      success: data => {\n        this.setState({\n          is_playing: true,\n        })\n        // console.log('play')\n      }\n    })\n  }\n\n  nextSong(token) {\n    $.ajax({\n      url: next_uri + this.state.device_info,\n      type: \"POST\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.setState({\n          is_playing: true,\n        })\n      }\n    });\n  }\n\n  prevSong(token) {\n    $.ajax({\n      url: prev_uri + this.state.device_info,\n      type: \"POST\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.setState({\n          is_playing: true,\n        })\n      }\n    });\n  }\n\n  render() {\n    var top_track_items = `top_track_items_${this.state.time_range}`;\n    var top_artist_items = `top_artist_items_${this.state.time_range}`;\n    // console.log(this.state.is_playing);\n    return (\n\n      <div className=\"App\" style={{backgroundColor: this.state.current_color[1]}}>\n\n        <header className=\"App-header\">\n        <div className=\"title\">\n        JamSesh\n        </div>\n          \n\n          {/* login page */}\n          {!this.state.token && (\n            <Button className=\"login\" href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=true`}>\n              Login to Spotify\n            </Button>\n          )}\n\n          {/* color toggle */}\n\n          {this.state.token && (\n            <Color\n\n              setSage={this.setSage}\n              setRetro={this.setRetro}\n              setBubblegum={this.setBubblegum}\n              // brown={this.brown}\n              current_color={this.state.current_color}\n            />\n          )}\n\n          {/* player */}\n          \n          {this.state.token && !this.state.no_data && (\n              <div className=\"pb-14 flex flex-col items-center h-full w-full\">\n                <div className=\"h-4/5 w-3/4 container relative\">\n                    <img className=\"absolute w-auto h-auto\" src={radio} alt=\"radio\"></img>\n                    <div className=\"pt-20 object-contain max-w-fit max-h-fit\">\n                        <Player\n                          item={this.state.item}\n                          is_playing={this.state.is_playing}\n                          progress_ms={this.state.progress_ms}\n                          current_color={this.state.current_color}\n                          handlePause={this.handlePause}\n                          handlePlay={this.handlePlay}\n                          handleNext={this.handleNext}\n                          handlePrev={this.handlePrev}\n                        />\n                    </div>\n                </div>\n              </div>\n\n          )}\n          {this.state.no_data && (\n            <p>\n              You're currently not playing anything on Spotify.\n            </p>\n          )}\n\n          {/* toggle button */}\n\n          {this.state.token && (\n            <ToggleButtons \n              time_range={this.state.time_range}\n              handleClick1={this.handleClick1}\n              handleClick2={this.handleClick2}\n              handleClick3={this.handleClick3}\n            />\n          )}\n\n          {/* testing!! */}\n\n          {this.state.token && this.state.retrieved_tracks && this.state.retrieved_artists &&(  \n            <Top\n              top_track_items={this.state[top_track_items]}\n              top_artist_items={this.state[top_artist_items]}\n              current_color={this.state.current_color}\n            />\n          )}\n\n          {/* genres */}\n\n          {this.state.token &&this.state.retrieved_artists &&(\n            <Genres\n              top_artist_items={this.state[top_artist_items]}\n              current_color={this.state.current_color}\n            />\n          )}\n          \n        </header>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;",[],"/Users/michelledeng/Documents/react-spotify-player/src/const.js",[],[],[],"/Users/michelledeng/Documents/react-spotify-player/src/hash.js",[],[],"/Users/michelledeng/Documents/react-spotify-player/src/Player.js",["63","64","65","66","67","68"],[],"import React, { Component } from \"react\";\nimport \"./Player.css\";\nimport pause_button from './images/PauseButton.png';\nimport play_button from './images/PlayButton.png';\nimport skip_button from './images/SkipButton.jpg';\nimport prev_button from './images/PrevButton.png'\n\nexport class Player extends Component {\n  render () {\n    const progressBarStyles = this.props.item.duration_ms ? { \n      width: (this.props.progress_ms * 100 / this.props.item.duration_ms) + '%'\n    } : {\n      width: 0\n    };\n  \n    const player_color = this.props.current_color[0];\n\n    let button;\n    if (this.props.is_playing) {\n      button = <button className=\"pause-button\" onClick={this.props.handlePause}>\n      <img src={pause_button} />\n    </button>\n    } else {\n      button = <button className=\"play-button\" onClick={this.props.handlePlay}>\n      <img src={play_button} />\n    </button>\n    }\n\n\n    return (\n      <div className=\"App\">\n        \n        <div className=\"player-wrapper\">\n  \n            <div className=\"now-playing__img\">\n              <img src={this.props.item.album.images[0].url} />\n            </div>\n            <div className=\"now-playing__side\">\n              <div className=\"now-playing__name\">{this.props.item.name}</div>\n              <div className=\"now-playing__artist\">\n                {this.props.item.artists[0].name}\n              </div>\n\n              <div className=\"now-playing__status\">\n                {this.props.is_playing}\n              </div>\n\n              <div className=\"progress\">\n                <div className=\"progress__bar\" style={progressBarStyles} />\n              </div>\n\n             \n\n              <div className=\"buttons-wrapper\">\n                <div className=\"prev-header\">\n                  <button onClick={this.props.handlePrev}>\n                    <img src={prev_button}></img>\n                  </button>\n                </div>\n                <div className=\"pause-play-header\">\n                  {button}\n                </div>\n\n                <div className=\"next-header\">\n                  <button onClick={this.props.handleNext}>\n                    <img src={skip_button}></img>\n                  </button>\n                </div>\n              </div>\n\n              \n              \n            </div>\n          </div>\n  \n      </div>\n    );\n  }\n\n  \n}\n\nexport default Player;\n\n\n","/Users/michelledeng/Documents/react-spotify-player/src/colors.js",[],[],"/Users/michelledeng/Documents/react-spotify-player/src/Genres.js",[],[],"/Users/michelledeng/Documents/react-spotify-player/src/Toggle.js",[],[],"/Users/michelledeng/Documents/react-spotify-player/src/Color.js",[],[],"/Users/michelledeng/Documents/react-spotify-player/src/Top.js",["69","70"],[],{"ruleId":"71","severity":1,"message":"72","line":6,"column":21,"nodeType":"73","messageId":"74","endLine":6,"endColumn":29},{"ruleId":"71","severity":1,"message":"75","line":16,"column":11,"nodeType":"73","messageId":"74","endLine":16,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":21,"column":7,"nodeType":"78","endLine":21,"endColumn":33},{"ruleId":"76","severity":1,"message":"77","line":25,"column":7,"nodeType":"78","endLine":25,"endColumn":32},{"ruleId":"76","severity":1,"message":"77","line":36,"column":15,"nodeType":"78","endLine":36,"endColumn":64},{"ruleId":"76","severity":1,"message":"77","line":57,"column":21,"nodeType":"78","endLine":57,"endColumn":44},{"ruleId":"76","severity":1,"message":"77","line":66,"column":21,"nodeType":"78","endLine":66,"endColumn":44},{"ruleId":"71","severity":1,"message":"79","line":9,"column":9,"nodeType":"73","messageId":"74","endLine":9,"endColumn":22},{"ruleId":"76","severity":1,"message":"77","line":30,"column":15,"nodeType":"78","endLine":30,"endColumn":65},"no-unused-vars","'play_uri' is defined but never used.","Identifier","unusedVar","'player_color' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'artists_color' is assigned a value but never used."]